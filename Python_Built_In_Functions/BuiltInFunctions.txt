Built In Functions Notes

https://docs.python.org/3/library/functions.html



Generators:
	Generators functions allow you to declare a function that behaves like an iterator, i.e. it can be used in a for loop.
	1) pyGenerator.py


callable(object)
    Return True if the object argument appears callable, False if not. If this returns true, it is still possible that a call
    fails, but if it is false, calling object will never succeed. 
    Note that classes are callable (calling a class returns a new instance); instances are callable if their class has a __call__() method.
	New in version 3.2: This function was first removed in Python 3.0 and then brought back in Python 3.2.

compile
	used when you have Python source code in string form
	want to make it into a Python code objec 
	
	example:
	>>> codeobj = compile('x = 2\nprint "X is", x', 'fakemodule', 'exec')
	>>> exec(codeobj)
	X is 2
	
	the code object converts a string into an object that you can later call exec on to run the source code in the string
	This is for "exec" mode; the "eval" mode allows use of eval instead, if the string contains code for a single expression

	main use for it is in metaprogramming or embedding situations
	For instance:
		have a Python program that allows users to script its behavior with custom Python code
		you might use compile and exec to store and execute these user-defined scripts

		Another reason compile is rarely used is that, like exec, eval, and their ilk, 
		compile is a potential security hole
		If you take user code in string form and compile it and later exec it, 
		you could be running unsafe code. 
		(For instance, imagine that in my example above the code was formatYourHardDrive() instead of print x.)
		
exec


eval

